import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var Diagnostic = /** @class */ (function (_super) {
    __extends(Diagnostic, _super);
    function Diagnostic() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.permission = {
            ACCEPT_HANDOVER: 'ACCEPT_HANDOVER',
            ACCESS_BACKGROUND_LOCATION: 'ACCESS_BACKGROUND_LOCATION',
            ACCESS_COARSE_LOCATION: 'ACCESS_COARSE_LOCATION',
            ACCESS_FINE_LOCATION: 'ACCESS_FINE_LOCATION',
            ACCESS_MEDIA_LOCATION: 'ACCESS_MEDIA_LOCATION',
            ACTIVITY_RECOGNITION: 'ACTIVITY_RECOGNITION',
            ADD_VOICEMAIL: 'ADD_VOICEMAIL',
            ANSWER_PHONE_CALLS: 'ANSWER_PHONE_CALLS',
            BLUETOOTH_ADVERTISE: 'BLUETOOTH_ADVERTISE',
            BLUETOOTH_CONNECT: 'BLUETOOTH_CONNECT',
            BLUETOOTH_SCAN: 'BLUETOOTH_SCAN',
            BODY_SENSORS: 'BODY_SENSORS',
            BODY_SENSORS_BACKGROUND: 'BODY_SENSORS_BACKGROUND',
            CALL_PHONE: 'CALL_PHONE',
            CAMERA: 'CAMERA',
            GET_ACCOUNTS: 'GET_ACCOUNTS',
            NEARBY_WIFI_DEVICES: 'NEARBY_WIFI_DEVICES',
            POST_NOTIFICATIONS: 'POST_NOTIFICATIONS',
            PROCESS_OUTGOING_CALLS: 'PROCESS_OUTGOING_CALLS',
            READ_CALENDAR: 'READ_CALENDAR',
            READ_CALL_LOG: 'READ_CALL_LOG',
            READ_CONTACTS: 'READ_CONTACTS',
            READ_EXTERNAL_STORAGE: 'READ_EXTERNAL_STORAGE',
            READ_MEDIA_AUDIO: 'READ_MEDIA_AUDIO',
            READ_MEDIA_IMAGES: 'READ_MEDIA_IMAGES',
            READ_MEDIA_VIDEO: 'READ_MEDIA_VIDEO',
            READ_PHONE_NUMBERS: 'READ_PHONE_NUMBERS',
            READ_PHONE_STATE: 'READ_PHONE_STATE',
            READ_SMS: 'READ_SMS',
            RECEIVE_MMS: 'RECEIVE_MMS',
            RECEIVE_SMS: 'RECEIVE_SMS',
            RECEIVE_WAP_PUSH: 'RECEIVE_WAP_PUSH',
            RECORD_AUDIO: 'RECORD_AUDIO',
            SEND_SMS: 'SEND_SMS',
            USE_SIP: 'USE_SIP',
            UWB_RANGING: 'UWB_RANGING',
            WRITE_CALENDAR: 'WRITE_CALENDAR',
            WRITE_CALL_LOG: 'WRITE_CALL_LOG',
            WRITE_CONTACTS: 'WRITE_CONTACTS',
            WRITE_EXTERNAL_STORAGE: 'WRITE_EXTERNAL_STORAGE',
        };
        _this.locationAuthorizationMode = {
            ALWAYS: 'always',
            WHEN_IN_USE: 'when_in_use',
        };
        /**
         * Location accuracy authorization
         */
        _this.locationAccuracyAuthorization = {
            FULL: 'full',
            REDUCED: 'reduced',
        };
        _this.permissionGroups = {
            CALENDAR: ['READ_CALENDAR', 'WRITE_CALENDAR'],
            CAMERA: ['CAMERA'],
            CONTACTS: ['READ_CONTACTS', 'WRITE_CONTACTS', 'GET_ACCOUNTS'],
            LOCATION: ['ACCESS_FINE_LOCATION', 'ACCESS_COARSE_LOCATION'],
            MICROPHONE: ['RECORD_AUDIO'],
            PHONE: [
                'READ_PHONE_STATE',
                'CALL_PHONE',
                'ADD_VOICEMAIL',
                'USE_SIP',
                'PROCESS_OUTGOING_CALLS',
                'READ_CALL_LOG',
                'WRITE_CALL_LOG',
            ],
            SENSORS: ['BODY_SENSORS'],
            SMS: ['SEND_SMS', 'RECEIVE_SMS', 'READ_SMS', 'RECEIVE_WAP_PUSH', 'RECEIVE_MMS'],
            STORAGE: ['READ_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE'],
            NEARBY_DEVICES: ["BLUETOOTH_ADVERTISE", "BLUETOOTH_SCAN", "BLUETOOTH_CONNECT"],
        };
        _this.locationMode = {
            HIGH_ACCURACY: 'high_accuracy',
            DEVICE_ONLY: 'device_only',
            BATTERY_SAVING: 'battery_saving',
            LOCATION_OFF: 'location_off',
        };
        _this.bluetoothState = {
            UNKNOWN: 'unknown',
            RESETTING: 'resetting',
            UNSUPPORTED: 'unsupported',
            UNAUTHORIZED: 'unauthorized',
            POWERED_OFF: 'powered_off',
            POWERED_ON: 'powered_on',
            POWERING_OFF: 'powering_off',
            POWERING_ON: 'powering_on',
        };
        /**
         * Access to the photo library (iOS 14+)
         *
         * ADD_ONLY - can add to but not read from Photo Library
         * READ_WRITE - can both add to and read from Photo Library
         *
         */
        _this.photoLibraryAccessLevel = {
            ADD_ONLY: 'add_only',
            READ_WRITE: 'read_write',
        };
        return _this;
    }
    Diagnostic.prototype.isLocationAvailable = function () { return cordova(this, "isLocationAvailable", {}, arguments); };
    Diagnostic.prototype.isWifiAvailable = function () { return cordova(this, "isWifiAvailable", {}, arguments); };
    Diagnostic.prototype.isCameraAvailable = function (externalStorage) { return cordova(this, "isCameraAvailable", { "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.isBluetoothAvailable = function () { return cordova(this, "isBluetoothAvailable", {}, arguments); };
    Diagnostic.prototype.switchToLocationSettings = function () { return cordova(this, "switchToLocationSettings", { "sync": true, "platforms": ["Android", "Windows 10", "iOS"] }, arguments); };
    Diagnostic.prototype.switchToMobileDataSettings = function () { return cordova(this, "switchToMobileDataSettings", { "sync": true, "platforms": ["Android", "Windows 10"] }, arguments); };
    Diagnostic.prototype.switchToBluetoothSettings = function () { return cordova(this, "switchToBluetoothSettings", { "sync": true, "platforms": ["Android", "Windows 10"] }, arguments); };
    Diagnostic.prototype.switchToWifiSettings = function () { return cordova(this, "switchToWifiSettings", { "sync": true, "platforms": ["Android", "Windows 10"] }, arguments); };
    Diagnostic.prototype.isWifiEnabled = function () { return cordova(this, "isWifiEnabled", { "platforms": ["Android", "Windows 10"] }, arguments); };
    Diagnostic.prototype.setWifiState = function (state) { return cordova(this, "setWifiState", { "callbackOrder": "reverse", "platforms": ["Android", "Windows 10"] }, arguments); };
    Diagnostic.prototype.setBluetoothState = function (state) { return cordova(this, "setBluetoothState", { "callbackOrder": "reverse", "platforms": ["Android", "Windows 10"] }, arguments); };
    Diagnostic.prototype.enableDebug = function () { return cordova(this, "enableDebug", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.isLocationEnabled = function () { return cordova(this, "isLocationEnabled", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.isLocationAuthorized = function () { return cordova(this, "isLocationAuthorized", {}, arguments); };
    Diagnostic.prototype.getLocationAuthorizationStatus = function () { return cordova(this, "getLocationAuthorizationStatus", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.getLocationAuthorizationStatuses = function () { return cordova(this, "getLocationAuthorizationStatuses", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.requestLocationAuthorization = function (mode, accuracy) { return cordova(this, "requestLocationAuthorization", { "platforms": ["Android", "iOS"], "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.isCameraPresent = function () { return cordova(this, "isCameraPresent", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.isCameraAuthorized = function (externalStorage) { return cordova(this, "isCameraAuthorized", { "platforms": ["Android", "iOS"], "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.getCameraAuthorizationStatus = function (externalStorage) { return cordova(this, "getCameraAuthorizationStatus", { "platforms": ["Android", "iOS"], "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.requestCameraAuthorization = function (externalStorage) { return cordova(this, "requestCameraAuthorization", { "platforms": ["Android", "iOS"], "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.isMicrophoneAuthorized = function () { return cordova(this, "isMicrophoneAuthorized", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.getMicrophoneAuthorizationStatus = function () { return cordova(this, "getMicrophoneAuthorizationStatus", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.requestMicrophoneAuthorization = function () { return cordova(this, "requestMicrophoneAuthorization", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.isContactsAuthorized = function () { return cordova(this, "isContactsAuthorized", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.getContactsAuthorizationStatus = function () { return cordova(this, "getContactsAuthorizationStatus", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.requestContactsAuthorization = function () { return cordova(this, "requestContactsAuthorization", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.isCalendarAuthorized = function () { return cordova(this, "isCalendarAuthorized", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.getCalendarAuthorizationStatus = function () { return cordova(this, "getCalendarAuthorizationStatus", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.requestCalendarAuthorization = function () { return cordova(this, "requestCalendarAuthorization", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.switchToSettings = function () { return cordova(this, "switchToSettings", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.getBluetoothState = function () { return cordova(this, "getBluetoothState", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.registerBluetoothStateChangeHandler = function (handler) { return cordova(this, "registerBluetoothStateChangeHandler", { "platforms": ["Android", "iOS"], "sync": true }, arguments); };
    Diagnostic.prototype.registerLocationStateChangeHandler = function (handler) { return cordova(this, "registerLocationStateChangeHandler", { "platforms": ["Android", "iOS"], "sync": true }, arguments); };
    Diagnostic.prototype.getArchitecture = function () { return cordova(this, "getArchitecture", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.getCurrentBatteryLevel = function () { return cordova(this, "getCurrentBatteryLevel", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.restart = function (cold) { return cordova(this, "restart", { "platforms": ["Android"], "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.isGpsLocationAvailable = function () { return cordova(this, "isGpsLocationAvailable", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.isGpsLocationEnabled = function () { return cordova(this, "isGpsLocationEnabled", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.isNetworkLocationAvailable = function () { return cordova(this, "isNetworkLocationAvailable", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.isNetworkLocationEnabled = function () { return cordova(this, "isNetworkLocationEnabled", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.isAirplaneModeEnabled = function () { return cordova(this, "isAirplaneModeEnabled", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.isMobileDataEnabled = function () { return cordova(this, "isMobileDataEnabled", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.getLocationMode = function () { return cordova(this, "getLocationMode", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.getDeviceOSVersion = function () { return cordova(this, "getDeviceOSVersion", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.getBuildOSVersion = function () { return cordova(this, "getBuildOSVersion", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.getPermissionAuthorizationStatus = function (permission) { return cordova(this, "getPermissionAuthorizationStatus", { "platforms": ["Android"], "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.getPermissionsAuthorizationStatus = function (permissions) { return cordova(this, "getPermissionsAuthorizationStatus", { "platforms": ["Android"], "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.requestRuntimePermission = function (permission) { return cordova(this, "requestRuntimePermission", { "platforms": ["Android"], "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.requestRuntimePermissions = function (permissions) { return cordova(this, "requestRuntimePermissions", { "platforms": ["Android"], "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.isRequestingPermission = function () { return cordova(this, "isRequestingPermission", { "sync": true }, arguments); };
    Diagnostic.prototype.registerPermissionRequestCompleteHandler = function (handler) { return cordova(this, "registerPermissionRequestCompleteHandler", { "sync": true }, arguments); };
    Diagnostic.prototype.isBluetoothEnabled = function () { return cordova(this, "isBluetoothEnabled", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.hasBluetoothSupport = function () { return cordova(this, "hasBluetoothSupport", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.hasBluetoothLESupport = function () { return cordova(this, "hasBluetoothLESupport", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.hasBluetoothLEPeripheralSupport = function () { return cordova(this, "hasBluetoothLEPeripheralSupport", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.getBluetoothAuthorizationStatus = function () { return cordova(this, "getBluetoothAuthorizationStatus", { "platforms": ["Android", "iOS"] }, arguments); };
    Diagnostic.prototype.getBluetoothAuthorizationStatuses = function () { return cordova(this, "getBluetoothAuthorizationStatuses", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.isExternalStorageAuthorized = function () { return cordova(this, "isExternalStorageAuthorized", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.getExternalStorageAuthorizationStatus = function () { return cordova(this, "getExternalStorageAuthorizationStatus", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.requestExternalStorageAuthorization = function () { return cordova(this, "requestExternalStorageAuthorization", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.getExternalSdCardDetails = function () { return cordova(this, "getExternalSdCardDetails", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.switchToWirelessSettings = function () { return cordova(this, "switchToWirelessSettings", { "platforms": ["Android"], "sync": true }, arguments); };
    Diagnostic.prototype.switchToNFCSettings = function () { return cordova(this, "switchToNFCSettings", { "platforms": ["Android"], "sync": true }, arguments); };
    Diagnostic.prototype.isNFCPresent = function () { return cordova(this, "isNFCPresent", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.isNFCEnabled = function () { return cordova(this, "isNFCEnabled", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.isNFCAvailable = function () { return cordova(this, "isNFCAvailable", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.registerNFCStateChangeHandler = function (handler) { return cordova(this, "registerNFCStateChangeHandler", { "platforms": ["Android"], "sync": true }, arguments); };
    Diagnostic.prototype.isDataRoamingEnabled = function () { return cordova(this, "isDataRoamingEnabled", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.isADBModeEnabled = function () { return cordova(this, "isADBModeEnabled", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.isDeviceRooted = function () { return cordova(this, "isDeviceRooted", { "platforms": ["Android"] }, arguments); };
    Diagnostic.prototype.isCameraRollAuthorized = function (accessLevel) { return cordova(this, "isCameraRollAuthorized", { "platforms": ["iOS"], "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.getCameraRollAuthorizationStatus = function (accessLevel) { return cordova(this, "getCameraRollAuthorizationStatus", { "platforms": ["iOS"], "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.requestCameraRollAuthorization = function (accessLevel) { return cordova(this, "requestCameraRollAuthorization", { "platforms": ["iOS"], "callbackOrder": "reverse" }, arguments); };
    Diagnostic.prototype.presentLimitedLibraryPicker = function () { return cordova(this, "presentLimitedLibraryPicker", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.isRemoteNotificationsEnabled = function () { return cordova(this, "isRemoteNotificationsEnabled", { "platforms": ["iOS", "Android"] }, arguments); };
    Diagnostic.prototype.isRegisteredForRemoteNotifications = function () { return cordova(this, "isRegisteredForRemoteNotifications", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.getRemoteNotificationsAuthorizationStatus = function () { return cordova(this, "getRemoteNotificationsAuthorizationStatus", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.requestRemoteNotificationsAuthorization = function (types, omitRegistration) { return cordova(this, "requestRemoteNotificationsAuthorization", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.getRemoteNotificationTypes = function () { return cordova(this, "getRemoteNotificationTypes", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.isRemindersAuthorized = function () { return cordova(this, "isRemindersAuthorized", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.getRemindersAuthorizationStatus = function () { return cordova(this, "getRemindersAuthorizationStatus", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.requestRemindersAuthorization = function () { return cordova(this, "requestRemindersAuthorization", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.isBackgroundRefreshAuthorized = function () { return cordova(this, "isBackgroundRefreshAuthorized", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.getBackgroundRefreshStatus = function () { return cordova(this, "getBackgroundRefreshStatus", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.requestBluetoothAuthorization = function () { return cordova(this, "requestBluetoothAuthorization", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.isMotionAvailable = function () { return cordova(this, "isMotionAvailable", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.isMotionRequestOutcomeAvailable = function () { return cordova(this, "isMotionRequestOutcomeAvailable", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.requestMotionAuthorization = function () { return cordova(this, "requestMotionAuthorization", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.getMotionAuthorizationStatus = function () { return cordova(this, "getMotionAuthorizationStatus", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.getLocationAccuracyAuthorization = function () { return cordova(this, "getLocationAccuracyAuthorization", { "platforms": ["iOS", "Android"] }, arguments); };
    Diagnostic.prototype.requestTemporaryFullAccuracyAuthorization = function (purpose) { return cordova(this, "requestTemporaryFullAccuracyAuthorization", { "platforms": ["iOS"] }, arguments); };
    Diagnostic.prototype.registerLocationAccuracyAuthorizationChangeHandler = function (handler) { return cordova(this, "registerLocationAccuracyAuthorizationChangeHandler", { "platforms": ["iOS"], "sync": true }, arguments); };
    Object.defineProperty(Diagnostic.prototype, "permissionStatus", {
        get: function () { return cordovaPropertyGet(this, "permissionStatus"); },
        set: function (value) { cordovaPropertySet(this, "permissionStatus", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Diagnostic.prototype, "NFCState", {
        get: function () { return cordovaPropertyGet(this, "NFCState"); },
        set: function (value) { cordovaPropertySet(this, "NFCState", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Diagnostic.prototype, "cpuArchitecture", {
        get: function () { return cordovaPropertyGet(this, "cpuArchitecture"); },
        set: function (value) { cordovaPropertySet(this, "cpuArchitecture", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Diagnostic.prototype, "remoteNotificationType", {
        get: function () { return cordovaPropertyGet(this, "remoteNotificationType"); },
        set: function (value) { cordovaPropertySet(this, "remoteNotificationType", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Diagnostic.prototype, "motionStatus", {
        get: function () { return cordovaPropertyGet(this, "motionStatus"); },
        set: function (value) { cordovaPropertySet(this, "motionStatus", value); },
        enumerable: false,
        configurable: true
    });
    Diagnostic.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: Diagnostic, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    Diagnostic.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: Diagnostic });
    Diagnostic.pluginName = "Diagnostic";
    Diagnostic.plugin = "cordova.plugins.diagnostic";
    Diagnostic.pluginRef = "cordova.plugins.diagnostic";
    Diagnostic.repo = "https://github.com/dpa99c/cordova-diagnostic-plugin";
    Diagnostic.platforms = ["Android", "iOS", "Windows"];
    Diagnostic = __decorate([], Diagnostic);
    return Diagnostic;
}(AwesomeCordovaNativePlugin));
export { Diagnostic };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: Diagnostic, decorators: [{
            type: Injectable
        }], propDecorators: { permissionStatus: [], NFCState: [], cpuArchitecture: [], remoteNotificationType: [], motionStatus: [], isLocationAvailable: [], isWifiAvailable: [], isCameraAvailable: [], isBluetoothAvailable: [], switchToLocationSettings: [], switchToMobileDataSettings: [], switchToBluetoothSettings: [], switchToWifiSettings: [], isWifiEnabled: [], setWifiState: [], setBluetoothState: [], enableDebug: [], isLocationEnabled: [], isLocationAuthorized: [], getLocationAuthorizationStatus: [], getLocationAuthorizationStatuses: [], requestLocationAuthorization: [], isCameraPresent: [], isCameraAuthorized: [], getCameraAuthorizationStatus: [], requestCameraAuthorization: [], isMicrophoneAuthorized: [], getMicrophoneAuthorizationStatus: [], requestMicrophoneAuthorization: [], isContactsAuthorized: [], getContactsAuthorizationStatus: [], requestContactsAuthorization: [], isCalendarAuthorized: [], getCalendarAuthorizationStatus: [], requestCalendarAuthorization: [], switchToSettings: [], getBluetoothState: [], registerBluetoothStateChangeHandler: [], registerLocationStateChangeHandler: [], getArchitecture: [], getCurrentBatteryLevel: [], restart: [], isGpsLocationAvailable: [], isGpsLocationEnabled: [], isNetworkLocationAvailable: [], isNetworkLocationEnabled: [], isAirplaneModeEnabled: [], isMobileDataEnabled: [], getLocationMode: [], getDeviceOSVersion: [], getBuildOSVersion: [], getPermissionAuthorizationStatus: [], getPermissionsAuthorizationStatus: [], requestRuntimePermission: [], requestRuntimePermissions: [], isRequestingPermission: [], registerPermissionRequestCompleteHandler: [], isBluetoothEnabled: [], hasBluetoothSupport: [], hasBluetoothLESupport: [], hasBluetoothLEPeripheralSupport: [], getBluetoothAuthorizationStatus: [], getBluetoothAuthorizationStatuses: [], isExternalStorageAuthorized: [], getExternalStorageAuthorizationStatus: [], requestExternalStorageAuthorization: [], getExternalSdCardDetails: [], switchToWirelessSettings: [], switchToNFCSettings: [], isNFCPresent: [], isNFCEnabled: [], isNFCAvailable: [], registerNFCStateChangeHandler: [], isDataRoamingEnabled: [], isADBModeEnabled: [], isDeviceRooted: [], isCameraRollAuthorized: [], getCameraRollAuthorizationStatus: [], requestCameraRollAuthorization: [], presentLimitedLibraryPicker: [], isRemoteNotificationsEnabled: [], isRegisteredForRemoteNotifications: [], getRemoteNotificationsAuthorizationStatus: [], requestRemoteNotificationsAuthorization: [], getRemoteNotificationTypes: [], isRemindersAuthorized: [], getRemindersAuthorizationStatus: [], requestRemindersAuthorization: [], isBackgroundRefreshAuthorized: [], getBackgroundRefreshStatus: [], requestBluetoothAuthorization: [], isMotionAvailable: [], isMotionRequestOutcomeAvailable: [], requestMotionAuthorization: [], getMotionAuthorizationStatus: [], getLocationAccuracyAuthorization: [], requestTemporaryFullAccuracyAuthorization: [], registerLocationAccuracyAuthorizationChangeHandler: [] } });
//# sourceMappingURL=data:application/json;base64,