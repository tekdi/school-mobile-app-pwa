{"version":3,"file":"utils-sqlite.js","sourceRoot":"","sources":["../../src/utils/utils-sqlite.ts"],"names":[],"mappings":"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","sourcesContent":["import { UtilsDrop } from '../utils/utils-drop';\nimport { UtilsJSON } from '../utils/utils-json';\nimport { UtilsDelete } from './utils-delete';\nimport { UtilsSQLStatement } from './utils-sqlstatement';\nexport class UtilsSQLite {\n  static async beginTransaction(db: any, isOpen: boolean): Promise<void> {\n      const msg = 'BeginTransaction: ';\n      if (!isOpen) {\n        return Promise.reject(new Error(`${msg}database not opened`));\n      }\n      try {\n        db.exec('BEGIN');\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(new Error(`${msg}${err.message}`));\n      }\n\n  }\n  static async rollbackTransaction(db: any, isOpen: boolean): Promise<void>\n   {\n      const msg = 'RollbackTransaction: ';\n      if (!isOpen) {\n        return Promise.reject(new Error(`${msg}database not opened`));\n      }\n      try {\n\n        db.exec('ROLLBACK');\n        return Promise.resolve();\n      } catch(err) {\n        return Promise.reject(new Error(`${msg}${err.message}`));\n      }\n\n  }\n  static commitTransaction(db: any, isOpen: boolean): Promise<void> {\n      const msg = 'CommitTransaction: ';\n      if (!isOpen) {\n        return Promise.reject(new Error(`${msg}database not opened`));\n      }\n      const sql = 'COMMIT';\n      try {\n        db.exec(sql);\n        return Promise.resolve();\n      } catch(err) {\n        return Promise.reject(new Error(`${msg}${err.message}`));\n      }\n\n  }\n  static async dbChanges(db: any): Promise<number> {\n      const SELECT_CHANGE = 'SELECT total_changes()';\n      let changes: number = 0;\n      try {\n        const res = db.exec(SELECT_CHANGE);\n        // process the row here\n        changes = res[0].values[0][0];\n        return Promise.resolve(changes);\n      } catch (err) {\n        return Promise.reject(new Error(`DbChanges failed: ${err.message}`));\n      }\n  }\n  static async getLastId(db: any): Promise<number> {\n      const SELECT_LAST_ID = 'SELECT last_insert_rowid()';\n      let lastId: number = -1;\n      try {\n        const res = db.exec(SELECT_LAST_ID );\n        // process the row here\n        lastId = res[0].values[0][0];\n        return Promise.resolve(lastId);\n      } catch (err) {\n        return Promise.reject(new Error(`GetLastId failed: ${err.message}`));\n      }\n\n  }\n  static async setForeignKeyConstraintsEnabled(db: any, toggle: boolean): Promise<void> {\n    let stmt = 'PRAGMA foreign_keys=OFF';\n    if (toggle) {\n      stmt = 'PRAGMA foreign_keys=ON';\n    }\n    try {\n      db.run(stmt);\n      return Promise.resolve();\n    } catch (err) {\n      const msg = err.message ? err.message : err;\n      return Promise.reject(new Error(`SetForeignKey: ${msg}`));\n    }\n  }\n  static async getVersion(db: any): Promise<number> {\n    let version = 0;\n    try {\n      const res = db.exec('PRAGMA user_version;');\n      version = res[0].values[0][0];\n      return Promise.resolve(version);\n    } catch (err) {\n      return Promise.reject(new Error(`GetVersion: ${err.message}`));\n    }\n  }\n  static async  setVersion(db: any, version: number): Promise<void> {\n    try {\n      db.exec(`PRAGMA user_version = ${version}`);\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(new Error(`SetVersion: ${err.message}`));\n    }\n  }\n\n  static async  execute(db: any, sql: string, fromJson: boolean):\n                                                   Promise<number> {\n    try {\n      var sqlStmt = sql;\n      // Check for DELETE FROM in sql string\n      if(!fromJson && sql.toLowerCase().includes('DELETE FROM'.toLowerCase())) {\n        sqlStmt = sql.replace(/\\n/g,'');\n        let sqlStmts: string[] = sqlStmt.split(';');\n        var resArr: string[] = [];\n        for ( const stmt of sqlStmts) {\n          const trimStmt = stmt.trim().substring(0,11).toUpperCase();\n          if( trimStmt === 'DELETE FROM' && stmt.toLowerCase().includes('WHERE'.toLowerCase())) {\n            const whereStmt = stmt.trim();\n            const rStmt = await UtilsSQLite.deleteSQL(db, whereStmt, []);\n            resArr.push(rStmt);\n          } else {\n            resArr.push(stmt);\n          }\n        }\n        sqlStmt = resArr.join(';');\n      }\n      db.exec(sqlStmt);\n      const changes = await UtilsSQLite.dbChanges(db);\n      return Promise.resolve(changes);\n    } catch (err) {\n      return Promise.reject(new Error(`Execute: ${err.message}`));\n    }\n  }\n  static async executeSet(db: any, set: any, fromJson: boolean,\n                          returnMode: string): Promise<any> {\n    const retValues = [];\n    let lastId: number = -1;\n    let retObj: any = {};\n    for (let i = 0; i < set.length; i++) {\n      const statement = 'statement' in set[i] ? set[i].statement : null;\n      const values =\n        'values' in set[i] && set[i].values.length > 0 ? set[i].values : [];\n      if (statement == null) {\n        let msg = 'ExecuteSet: Error No statement';\n        msg += ` for index ${i}`;\n        return Promise.reject(new Error(msg));\n      }\n      try {\n\n        if (Array.isArray(values[0])) {\n          for (const val of values) {\n            const mVal: any[] = await UtilsSQLite.replaceUndefinedByNull(val);\n            retObj = await UtilsSQLite.run(db, statement, mVal, fromJson, returnMode)\n            lastId = retObj[\"lastId\"];\n            if(Object.keys(retObj).includes(\"values\") && retObj[\"values\"].length > 0) {\n              retValues.push(retObj[\"values\"]);\n            }\n          }\n        } else {\n          const mVal: any[] = await UtilsSQLite.replaceUndefinedByNull(values);\n          retObj = await UtilsSQLite.run(db, statement, mVal, fromJson, returnMode)\n          lastId = retObj[\"lastId\"];\n          if(Object.keys(retObj).includes(\"values\") && retObj[\"values\"].length > 0) {\n            retValues.push(retObj[\"values\"]);\n          }\n        }\n      } catch (err) {\n        return Promise.reject(new Error(`ExecuteSet: ${err.message}`));\n      }\n    }\n    retObj[\"lastId\"] = lastId;\n    retObj[\"values\"] = returnMode === 'all' ? retValues :\n                      returnMode === 'one' ? retValues[0] : [];\n    return Promise.resolve(retObj);\n  }\n  static async queryAll(db: any, sql: string, values: any[]): Promise<any[]> {\n    try {\n      let retArr: any[] = [];\n      if(values != null && values.length > 0) {\n        retArr = db.exec(sql, values);\n      } else {\n        retArr = db.exec(sql);\n      }\n      if(retArr.length == 0) return Promise.resolve([]);\n      const result = retArr[0].values.map(entry => {\n        const obj = {};\n        retArr[0].columns.forEach((column: string, index: number) => {\n          obj[column] = entry[index];\n        });\n        return obj;\n      });\n\n      return Promise.resolve(result);\n    } catch (err) {\n      return Promise.reject(new Error(`queryAll: ${err.message}`));\n    }\n  }\n  static async run(db: any, statement: string, values: any[], fromJson: boolean,\n                            returnMode: string): Promise<any> {\n    let stmtType: string = statement.replace(/\\n/g,\"\").trim().substring(0,6).toUpperCase();\n    let sqlStmt: string = statement\n    let retValues : any[] = [];\n    let retObj: any = {};\n    try {\n      if (!fromJson && stmtType === \"DELETE\") {\n        sqlStmt = await UtilsSQLite.deleteSQL(db, statement, values);\n      }\n      const mValues = values ? values : [];\n      if(mValues.length > 0) {\n        const mVal: any[] = await UtilsSQLite.replaceUndefinedByNull(mValues);\n        const res = db.exec(sqlStmt, mVal);\n        if(returnMode === \"all\" || returnMode === \"one\") {\n          if(res && res.length > 0) {\n            retValues = UtilsSQLite.getReturnedValues(res[0], returnMode);\n          } else {\n            return Promise.reject(new Error(`run: ${sqlStmt} does not returned any change`));\n          }\n        }\n      } else {\n        const res = db.exec(sqlStmt);\n        if(returnMode === \"all\" || returnMode === \"one\") {\n          if(res && res.length > 0) {\n            retValues = UtilsSQLite.getReturnedValues(res[0], returnMode);\n          } else {\n            return Promise.reject(new Error(`run: ${sqlStmt} does not returned any change`));\n          }\n        }\n      }\n      const lastId = await UtilsSQLite.getLastId(db);\n      retObj[\"lastId\"] = lastId;\n      if(retValues != null && retValues.length > 0) retObj[\"values\"] = retValues;\n      return Promise.resolve(retObj);\n\n    } catch (err) {\n      return Promise.reject(new Error(`run: ${err.message}`));\n    }\n  }\n  static getReturnedValues(result : any, returnMode: string) : any[] {\n    const retValues: any[] = [];\n    for ( let i: number =0; i < result.values.length; i++) {\n      let row: any = {}\n      for( let j: number = 0; j < result.columns.length; j++) {\n        row[result.columns[j]] = result.values[i][j];\n      }\n      retValues.push(row);\n      if(returnMode === 'one') break;\n    }\n    return retValues\n  }\n  static async  deleteSQL(db: any, statement: string,\n                          values: any[]): Promise<string> {\n    let sqlStmt: string = statement;\n    try {\n        const isLast = await UtilsSQLite.isLastModified(db,true);\n        const isDel = await UtilsSQLite.isSqlDeleted(db,true);\n        if(!isLast || !isDel) {\n          return sqlStmt;\n        }\n        // Replace DELETE by UPDATE\n        // set sql_deleted to 1 and the last_modified to\n        // timenow\n        const whereClause = UtilsSQLStatement.extractWhereClause(sqlStmt);\n        if (!whereClause) {\n          const msg: string = 'deleteSQL: cannot find a WHERE clause';\n          return Promise.reject(new Error(`${msg}`));\n        }\n        const tableName = UtilsSQLStatement.extractTableName(sqlStmt);\n        if (!tableName) {\n          const msg: string = 'deleteSQL: cannot find a WHERE clause';\n          return Promise.reject(new Error(`${msg}`));\n        }\n        const colNames = UtilsSQLStatement.extractColumnNames(whereClause);\n        if (colNames.length === 0) {\n          const msg = 'deleteSQL: Did not find column names in the WHERE Statement';\n          return Promise.reject(new Error(`${msg}`));\n        }\n        const setStmt = 'sql_deleted = 1';\n        // Find REFERENCES if any and update the sql_deleted\n        // column\n        const hasToUpdate = await UtilsDelete.findReferencesAndUpdate(\n          db,\n          tableName,\n          whereClause,\n          colNames,\n          values\n        );\n        if (hasToUpdate) {\n          const whereStmt = whereClause.endsWith(';')\n            ? whereClause.slice(0, -1)\n            : whereClause;\n          sqlStmt = `UPDATE ${tableName} SET ${setStmt} WHERE ${whereStmt} AND sql_deleted = 0;`;\n        } else {\n          sqlStmt = '';\n        }\n        return Promise.resolve(sqlStmt);\n    } catch (err) {\n      let msg = err.message ? err.message : err;\n      return Promise.reject(new Error(`deleteSQL: ${msg}`));\n    }\n  }\n\n  static async getTableList(db:any): Promise<any[]> {\n    try {\n      const result = await UtilsDrop.getTablesNames(db)\n      return Promise.resolve(result);\n    } catch (err) {\n      return Promise.reject(new Error(`getTableList: ${err.message}`));\n    }\n  }\n  static async isTableExists(db: any, tableName: string): Promise<boolean> {\n    try {\n      let statement = 'SELECT name FROM sqlite_master WHERE ';\n      statement += `type='table' AND name='${tableName}';`;\n      const res = await UtilsSQLite.queryAll(db,statement,[]);\n      const ret: boolean = res.length > 0 ? true : false;\n      return Promise.resolve(ret);\n    } catch (err) {\n      return Promise.reject(new Error(`isTableExists: ${err.message}`));\n    }\n  }\n  /**\n   * isLastModified\n   * @param db\n   * @param isOpen\n   */\n  static async  isLastModified(db: any,isOpen: boolean): Promise<boolean> {\n      if (!isOpen) {\n        return Promise.reject('isLastModified: database not opened');\n      }\n      try {\n        const tableList: string[] = await UtilsDrop.getTablesNames(db);\n        for( const table of tableList) {\n          const tableNamesTypes: any = await UtilsJSON\n                                  .getTableColumnNamesTypes(db, table);\n          const tableColumnNames: string[] = tableNamesTypes.names;\n          if(tableColumnNames.includes(\"last_modified\")) {\n            return Promise.resolve(true);\n          }\n        }\n      } catch (err) {\n        return Promise.reject(`isLastModified: ${err}`);\n      }\n  }\n  /**\n   * isSqlDeleted\n   * @param db\n   * @param isOpen\n   */\n  static async  isSqlDeleted(db: any,isOpen: boolean): Promise<boolean> {\n    if (!isOpen) {\n      return Promise.reject('isSqlDeleted: database not opened');\n    }\n    try {\n      const tableList: string[] = await UtilsDrop.getTablesNames(db);\n      for( const table of tableList) {\n        const tableNamesTypes: any = await UtilsJSON\n                        .getTableColumnNamesTypes(db, table);\n        const tableColumnNames: string[] = tableNamesTypes.names;\n        if(tableColumnNames.includes(\"sql_deleted\")) {\n          return Promise.resolve(true);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(`isSqlDeleted: ${err}`);\n    }\n  }\n  static async  replaceUndefinedByNull(values: any[]): Promise<any[]> {\n    const retValues: any[] = [];\n    for( const val of values) {\n      let mVal: any = val;\n      if( typeof val === 'undefined') mVal = null;\n      retValues.push(mVal);\n    }\n    return Promise.resolve(retValues);\n  }\n  static async backupTables(db: any): Promise<Record<string, string[]>> {\n    const msg = 'BackupTables: ';\n    let alterTables: Record<string, string[]> = {};\n    try {\n      const tables: string[] = await UtilsDrop.getTablesNames(db);\n      for (const table of tables) {\n        try {\n          const colNames: string[] = await UtilsSQLite.backupTable(db, table);\n          alterTables[`${table}`] = colNames;\n        } catch (err) {\n          return Promise.reject(\n            new Error(`${msg}table ${table}: ` + `${err.message}`),\n          );\n        }\n      }\n      return Promise.resolve(alterTables);\n    } catch (err) {\n      return Promise.reject(new Error(`BackupTables: ${err.message}`));\n    }\n  }\n  static async  backupTable(db: any, table: string): Promise<string[]> {\n    try {\n      // start a transaction\n      await UtilsSQLite.beginTransaction(db, true);\n      // get the table's column names\n      const colNames: string[] = await UtilsSQLite.getTableColumnNames(db, table);\n      const tmpTable = `_temp_${table}`;\n      // Drop the tmpTable if exists\n      const delStmt = `DROP TABLE IF EXISTS ${tmpTable};`;\n      await UtilsSQLite.run(db, delStmt, [], false, 'no');\n    // prefix the table with _temp_\n      let stmt = `ALTER TABLE ${table} RENAME `;\n      stmt += `TO ${tmpTable};`;\n      const lastId: number = await UtilsSQLite.run(db, stmt, [], false, 'no');\n      if (lastId < 0) {\n        let msg = 'BackupTable: lastId < 0';\n        try {\n          await UtilsSQLite.rollbackTransaction(db, true);\n        } catch (err) {\n          msg += `: ${err.message}`;\n        }\n        return Promise.reject(new Error(`${msg}`));\n      } else {\n        try {\n          await UtilsSQLite.commitTransaction(db, true);\n          return Promise.resolve(colNames);\n        } catch (err) {\n          return Promise.reject(new Error('BackupTable: ' + `${err.message}`));\n        }\n      }\n    } catch (err) {\n      return Promise.reject(new Error(`BackupTable: ${err.message}`));\n    }\n  }\n  static async  getTableColumnNames(db: any, tableName: string): Promise<string[]> {\n    let resQuery: any[] = [];\n    const retNames: string[] = [];\n    const query = `PRAGMA table_info('${tableName}');`;\n    try {\n      resQuery = await UtilsSQLite.queryAll(db, query, []);\n      if (resQuery.length > 0) {\n        for (const query of resQuery) {\n          retNames.push(query.name);\n        }\n      }\n      return Promise.resolve(retNames);\n    } catch (err) {\n      return Promise.reject(\n        new Error('GetTableColumnNames: ' + `${err.message}`),\n      );\n    }\n  }\n  static async  findCommonColumns(db: any, alterTables: Record<string, string[]> ):\n                              Promise<Record<string, string[]>> {\n    let commonColumns : Record<string, string[]> = {};\n    try {\n      // Get new table list\n      const tables: any[] = await UtilsDrop.getTablesNames(db);\n      if (tables.length === 0) {\n        return Promise.reject(\n          new Error('FindCommonColumns: get ' + \"table's names failed\"),\n        );\n      }\n      for (const table of tables) {\n        // get the column's name\n        const tableNames: any = await UtilsSQLite.getTableColumnNames(db, table);\n        // find the common columns\n        const keys: string[] = Object.keys(alterTables);\n        if (keys.includes(table)) {\n          commonColumns[table] = UtilsSQLite.arraysIntersection(alterTables[table], tableNames);\n        }\n      }\n      return Promise.resolve(commonColumns);\n    } catch (err) {\n      return Promise.reject(new Error(`FindCommonColumns: ${err.message}`));\n    }\n  }\n  static arraysIntersection(a1: any[], a2: any[]): any[] {\n    if (a1 != null && a2 != null) {\n      const first = new Set(a1);\n      const second = new Set(a2);\n      return [...first].filter(item => second.has(item));\n    } else {\n      return [];\n    }\n  }\n\n  static async updateNewTablesData(db: any, commonColumns: Record<string, string[]> ): Promise<void> {\n    try {\n      // start a transaction\n      await UtilsSQLite.beginTransaction(db, true);\n\n      const statements: string[] = [];\n      const keys: string[] = Object.keys(commonColumns);\n      keys.forEach(key => {\n        const columns = commonColumns[key].join(',');\n        let stmt = `INSERT INTO ${key} `;\n        stmt += `(${columns}) `;\n        stmt += `SELECT ${columns} FROM _temp_${key};`;\n        statements.push(stmt);\n      });\n      const changes: number = await UtilsSQLite.execute(db, statements.join('\\n'), false);\n      if (changes < 0) {\n        let msg: string = 'updateNewTablesData: ' + 'changes < 0';\n        try {\n          await UtilsSQLite.rollbackTransaction(db, true);\n        } catch (err) {\n          msg += `: ${err.message}`;\n        }\n        return Promise.reject(new Error(`${msg}`));\n      } else {\n        try {\n          await UtilsSQLite.commitTransaction(db, true);\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(\n            new Error('updateNewTablesData: ' + `${err.message}`),\n          );\n        }\n      }\n    } catch (err) {\n      return Promise.reject(\n        new Error('updateNewTablesData: ' + `${err.message}`),\n      );\n    }\n  }\n\n}\n"]}